{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst User = require('./models/User'); // Import your User model\n\n// Registration route\nrouter.post('/register', async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  try {\n    // Validate input (you can add more validation as needed)\n    if (!name || !email || !password) {\n      return res.status(400).json({\n        message: 'All fields are required'\n      });\n    }\n\n    // Check if the user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User  already exists'\n      });\n    }\n\n    // Create a new user\n    const newUser = new User({\n      name,\n      email,\n      password\n    });\n    await newUser.save();\n\n    // Respond with success\n    res.status(201).json({\n      message: 'User  registered successfully'\n    });\n  } catch (error) {\n    console.error('Error during registration:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","User","post","req","res","name","email","password","body","status","json","message","existingUser","findOne","newUser","save","error","console","module","exports"],"sources":["D:/INFORMATICA/ARCHIVOS_EXTRAIBLES/MERN-Todo-App-main/client/src/components/Register.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst User = require('./models/User'); // Import your User model\r\n\r\n// Registration route\r\nrouter.post('/register', async (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    // Validate input (you can add more validation as needed)\r\n    if (!name || !email || !password) {\r\n      return res.status(400).json({ message: 'All fields are required' });\r\n    }\r\n\r\n    // Check if the user already exists\r\n    const existingUser  = await User.findOne({ email });\r\n    if (existingUser ) {\r\n      return res.status(400).json({ message: 'User  already exists' });\r\n    }\r\n\r\n    // Create a new user\r\n    const newUser  = new User({ name, email, password });\r\n    await newUser .save();\r\n\r\n    // Respond with success\r\n    res.status(201).json({ message: 'User  registered successfully' });\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,IAAI,GAAGH,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;AAEvC;AACAC,MAAM,CAACG,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE1C,IAAI;IACF;IACA,IAAI,CAACH,IAAI,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,EAAE;MAChC,OAAOH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA0B,CAAC,CAAC;IACrE;;IAEA;IACA,MAAMC,YAAY,GAAI,MAAMX,IAAI,CAACY,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IACnD,IAAIM,YAAY,EAAG;MACjB,OAAOR,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAAC;IAClE;;IAEA;IACA,MAAMG,OAAO,GAAI,IAAIb,IAAI,CAAC;MAAEI,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpD,MAAMO,OAAO,CAAEC,IAAI,CAAC,CAAC;;IAErB;IACAX,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDZ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;AAEFO,MAAM,CAACC,OAAO,GAAGpB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}