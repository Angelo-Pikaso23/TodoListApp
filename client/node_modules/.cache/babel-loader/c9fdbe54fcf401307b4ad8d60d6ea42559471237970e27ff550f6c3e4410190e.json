{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcrypt');\nconst User = require('../../models//User'); // Adjust the path as necessary\nconst router = express.Router();\n\n// Registration route\nrouter.post('/register', async (req, res) => {\n  const {\n    username,\n    email,\n    password\n  } = req.body;\n\n  // Validate input\n  if (!username || !email || !password) {\n    return res.status(400).json({\n      message: 'Todos los campos son obligatorios.'\n    });\n  }\n  try {\n    // Check if the user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'El usuario ya existe'\n      });\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create a new user\n    const newUser = new User({\n      username,\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'Usuario registrado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error during registration:', error);\n    res.status(500).json({\n      message: 'Error al registrar el usuario'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","User","router","Router","post","req","res","username","email","password","body","status","json","message","existingUser","findOne","hashedPassword","hash","newUser","save","error","console","module","exports"],"sources":["D:/INFORMATICA/ARCHIVOS_EXTRAIBLES/MERN-Todo-App-main/client/src/components/Register.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('../../models//User'); // Adjust the path as necessary\r\nconst router = express.Router();\r\n\r\n// Registration route\r\nrouter.post('/register', async (req, res) => {\r\n    const { username, email, password } = req.body;\r\n\r\n    // Validate input\r\n    if (!username || !email || !password) {\r\n        return res.status(400).json({ message: 'Todos los campos son obligatorios.' });\r\n    }\r\n\r\n    try {\r\n        // Check if the user already exists\r\n        const existingUser  = await User.findOne({ email });\r\n        if (existingUser ) {\r\n            return res.status(400).json({ message: 'El usuario ya existe' });\r\n        }\r\n\r\n        // Hash the password\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n        // Create a new user\r\n        const newUser  = new User({ username, email, password: hashedPassword });\r\n        await newUser .save();\r\n\r\n        res.status(201).json({ message: 'Usuario registrado exitosamente' });\r\n    } catch (error) {\r\n        console.error('Error during registration:', error);\r\n        res.status(500).json({ message: 'Error al registrar el usuario' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAC5C,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;;EAE9C;EACA,IAAI,CAACH,QAAQ,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,EAAE;IAClC,OAAOH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAqC,CAAC,CAAC;EAClF;EAEA,IAAI;IACA;IACA,MAAMC,YAAY,GAAI,MAAMb,IAAI,CAACc,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IACnD,IAAIM,YAAY,EAAG;MACf,OAAOR,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAAC;IACpE;;IAEA;IACA,MAAMG,cAAc,GAAG,MAAMhB,MAAM,CAACiB,IAAI,CAACR,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMS,OAAO,GAAI,IAAIjB,IAAI,CAAC;MAAEM,QAAQ;MAAEC,KAAK;MAAEC,QAAQ,EAAEO;IAAe,CAAC,CAAC;IACxE,MAAME,OAAO,CAAEC,IAAI,CAAC,CAAC;IAErBb,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAkC,CAAC,CAAC;EACxE,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDd,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC;EACtE;AACJ,CAAC,CAAC;AAEFS,MAAM,CAACC,OAAO,GAAGrB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}